#!/bin/bash

if [ $# -ne 2 ]; then
echo "Usage: $0 <release-name> <minor-version>"
echo "Example: $0 junwei 3.58"
exit
fi

. ./0-vars

FULLFILEUNCOMPRESSED=$HDDROOTFSPATH
if [ $LINKSTATION -eq 1 ]; then
	AUTOFILE=linkstation_series-$VERSIONDOT-$1.zip
	FW_INFO=$FINALOUTPUTAUTO/fw_info2.xml
else
	AUTOFILE=cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip
	FW_INFO=/dev/null
fi

echo $0 running...

echo "  Cleaning up old versions"
rm -f $HDDROOTFSPATH/hddrootfs.img
rm -f $RESOURCES/hddrootfs.buffalo.updated

echo "  Update firmware revision"
DAT="`date "+%Y/%m/%d %H:%M:%S"`"
sed -i "s/^VERSION=$VERSIONDOT.*\$/VERSION=$VERSIONDOT-$1/" $SRC/etc/linkstation_release
sed -i "s/^SUBVERSION=.*\$/SUBVERSION=HDD $2/" $SRC/etc/linkstation_release
sed -i "s,^BUILDDATE=.*\$,BUILDDATE=$DAT," $SRC/etc/linkstation_release
sed -i "s/^VERSION=$VERSIONDOT.*\$/VERSION=$VERSIONDOT-$1-$2\r/" $HDDROOTFSPATH/linkstation_version.ini
sed -i "s,^ROOTFS=.*\$,ROOTFS=$DAT\r," $HDDROOTFSPATH/linkstation_version.ini
sed -i "s/^VERSION=$VERSIONDOT.*\$/VERSION=$VERSIONDOT-$1-$2\r/" $HDDROOTFSPATH/linkstation_version.txt
sed -i "s,^ROOTFS=.*\$,ROOTFS=$DAT\r," $HDDROOTFSPATH/linkstation_version.txt

echo "  Compressing hddrootfs.buffalo.updated"
tar -C $SRC -cf $RESOURCES/hddrootfs.buffalo.updated.tar .
gzip -9 $RESOURCES/hddrootfs.buffalo.updated.tar
mv $RESOURCES/hddrootfs.buffalo.updated.tar.gz $RESOURCES/hddrootfs.buffalo.updated

echo "  Encrypting to hddrootfs.img"
zip -9 -q -j -e $HDDROOTFSPATH/hddrootfs.img $RESOURCES/hddrootfs.buffalo.updated -P "`cat $RESOURCES/password$VERSION`"

echo "  Copying hddrootfs.buffalo.updated to autoupdate folder and preparing other autoupdate files"
rm -rf $TMPFOLDER
mkdir $TMPFOLDER
if [ $LINKSTATION -eq 1 ]; then
	#unzip -q -o -d $TMPFOLDER -P "`cat $RESOURCES/password$VERSION`" $FULLFILEUNCOMPRESSED/hddrootfs.img
	cp $RESOURCES/hddrootfs.buffalo.updated $TMPFOLDER
	unzip -q -o -d $TMPFOLDER -P "`cat $RESOURCES/initrd$VERSION`" $FULLFILEUNCOMPRESSED/initrd.img
	unzip -q -o -d $TMPFOLDER -P "`cat $RESOURCES/u-boot$VERSION`" $FULLFILEUNCOMPRESSED/u-boot.img
	unzip -q -o -d $TMPFOLDER -P "`cat $RESOURCES/uimage$VERSION`" $FULLFILEUNCOMPRESSED/uImage.img
fi

echo "  Clean up hddrootfs.buffalo.updated"
rm -f $RESOURCES/hddrootfs.buffalo.updated

if [ $LINKSTATION -ne 1 ]; then
	echo "  Creating full firmware zip cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip"
	cd $FIRMWARESHELL
	zip -q -r ../cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip .
	cd $FIRMWARESHELLBACKOUT
	if [ -d "$FINALOUTPUTFULL" ]; then
        	echo "  Moving full firmware to final place at $FINALOUTPUTFULL"
        	mv $RESOURCES/cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip $FINALOUTPUTFULL
	else
        	echo "**$FINALOUTPUTFULL does not exist, keeping firmware at $RESOURCES/cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip"
        	echo "**Consider settings \$FINALOUTPUTFULL in $0"
	fi
	echo "DONE cloudstor-firmware-build-$VERSIONDOT-$SUBVERSION-$1.zip"
	exit
fi

echo "  Create autoupdate file $AUTOFILE"
cd $TMPFOLDER
zip -9 -q -r $AUTOFILE .
cd $TMPFOLDERBACKOUT

echo "  Creating full firmware zip ls_series-$VERSION-$1.zip"
cd $FIRMWARESHELL
zip -q -r ../ls_series-$VERSION-$1.zip .
cd $FIRMWARESHELLBACKOUT

if [ -d "$FINALOUTPUTAUTO" ]; then
	echo "  Moving autoupdate to final place at $FINALOUTPUTAUTO"
	mv $TMPFOLDER/$AUTOFILE $FINALOUTPUTAUTO
	SIZE="`stat -c%s $FINALOUTPUTAUTO/$AUTOFILE`"
	MD5="`md5sum $FINALOUTPUTAUTO/$AUTOFILE | cut -c-32`"
else
	echo "**$FINALOUTPUTAUTO does not exist, keeping autoupdate firmware at $TMPFOLDER/$AUTOFILE"
	echo "**Consider setting \$FINALOUTPUTAUTO in $0"
	SIZE="`stat -c%s $TMPFOLDER/$AUTOFILE`"
	MD5="`md5sum $TMPFOLDER/$AUTOFILE | cut -c-32`"
fi

if [ -d "$FINALOUTPUTFULL" ]; then
	echo "  Moving full firmware to final place at $FINALOUTPUTFULL"
	mv $RESOURCES/ls_series-$VERSION-$1.zip $FINALOUTPUTFULL
else
	echo "**$FINALOUTPUTFULL does not exist, keeping firmware at $RESOURCES/ls_series-$VERSION-$1.zip"
	echo "**Consider settings \$FINALOUTPUTFULL in $0"
fi

if [ -f "$FW_INFO" ]; then
	echo "  Adding changes to fw_info"
	sed -i '/^\s*<size>$/,/^\s*<\/size>$/ {/size/ !{s/^\(\s*\)[0-9]*$/\1'"$SIZE"'/}}' $FW_INFO
	sed -i '/^\s*<checksum/,/^\s*<\/checksum>$/ {/checksum/ !{s/^\(\s*\)[a-zA-Z0-9]*$/\1'"$MD5"'/}}' $FW_INFO
	sed -i '/^\s*<version/,/^\s*<\/version>$/ {/version/ !{s/^\(\s*\)[-\.0-9]*$/\1'"$VERSIONDOT-$2"'/}}' $FW_INFO
	sed -i '/^\s*<name/,/^\s*<\/name>$/ {/name/ !{s/^\(\s*\).*$/\1LinkStation Series Firmware Updater Ver.'"$VERSIONDOT $1"'/}}' $FW_INFO
else
	echo "**$FW_INFO doesn't exist."
	echo "**Consider setting \$FW_INFO in $0"
fi

echo "DONE ls_series-$VERSION-$1.zip"
echo "DONE $AUTOFILE"
echo "AutoUpdate FILESIZE: $SIZE"
echo "AutoUpdate MD5SUM: $MD5"

